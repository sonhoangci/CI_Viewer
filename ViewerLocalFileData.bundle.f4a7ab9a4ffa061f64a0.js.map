{"version":3,"sources":["webpack:///./connectedComponents/ViewerLocalFileData.js","webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js"],"names":["OHIFStudyMetadata","metadata","studyMetadataManager","utils","dropZoneLinkDialog","onDrop","i18n","dir","noDrag","getRootProps","getInputProps","className","webkitdirectory","mozdirectory","ViewerLocalFileData","studies","loading","error","purge","updatedStudies","map","study","studyMetadata","StudyInstanceUID","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","forEachDisplaySet","displayset","localFile","add","setState","acceptedFiles","filesToStudies","updateStudies","this","state","JSON","stringify","noClick","style","width","height","studyInstanceUIDs","a","props","t","linksDialogMessage","Component","PropTypes","array","withTranslation","scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","_onDerivedDisplaySetsLoadedAndCached","updateButtonGroups","panelModules","MODULE_TYPES","PANEL","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","activeViewport","menuOptionEntry","value","target","icon","bottomLabel","label","unshift","document","addEventListener","removeEventListener","prevProps","activeContextsChanged","prevStudies","prevActiveViewport","shouldUpdate","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","_getCustomButtonComponent","CustomComponent","activeButtonsIds","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","any","modal","withModal","withDialog","withAppContext","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","progress","studiesWithLoadingData","thumbnails","displaySetInstanceUID","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","isArray","reduce","all","current","currentDisplaySet","concat","ds","findDisplaySetByUID","isDerived","Modality","servicesManager","services","LoggerService","UINotificationService","getSourceDisplaySet","message","show","autoClose","referencedDisplaySet","activatedLabelmapPromise","then","activatedLabelmapIndex","selectionFired","CustomEvent","dispatchEvent","Error","StudyBrowser","ViewportPane","children","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","logger","useLogger","useEffect","ViewportPanes","React","useMemo","pluginName","ViewportComponent","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","isOpen","fromSideClass","styles","maxWidth","marginRight","Number","parseInt","UIModalService","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","Viewer","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","_getActiveViewport","dismissAll","timepointApi","measurementApi","currentTimepointId","activeDisplaySetInstanceUID","undefined","_mapStudiesToThumbnails","prevActiveDisplaySetInstanceUID","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","linkPath","createLogoComponentFn","isDerivedDisplaySetsLoaded","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","getActiveViewport","shape","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","_checkForSeriesInconsistencesWarnings","inconsistencyWarnings","reconstructionIssues","warning","ReconstructionIssues","DATASET_4D","VARYING_IMAGESDIMENSIONS","VARYING_IMAGESCOMPONENTS","VARYING_IMAGESORIENTATION","IRREGULAR_SPACING","MULTIFFRAMES","missingFrames","warn","segMetadata","image","groupsLen","PerFrameFunctionalGroups","PerFrameFunctionalGroupsSequence","SourceImageSequence","DerivationImageSequence","ReferencedSOPInstanceUID","imageId","sopCommonModule","cornerstone","metaData","get","sopInstanceUID","sourceImageMetadata","Rows","Columns","altImageText","imageIndex","Math","floor","hasWarnings","_isDisplaySetActive","setTimepoints","setMeasurements","getActiveServer","servers","ConnectedViewer","FileLoader","file","dataset","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientBirthdate","PatientSex","StudyId","StudyDescription","SeriesInstanceUID","instances","SOPInstanceUID","SOPClassUID","NumberOfFrames","isLocalFile","metadataProvider","DICOMFileLoader","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","e","console","getStudyFromDataset","PatientBirthDate","StudyID","instance","url","FileLoaderService","fileType","loader","getLoader","groupBy","list","groupByKey","listKey","nonKeyCounter","acc","obj","studyGroup","seriesGrouped","fileManager","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","files","processFilesPromises","groupSeries","flat"],"mappings":"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","file":"ViewerLocalFileData.bundle.f4a7ab9a4ffa061f64a0.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { metadata, utils } from '@ohif/core';\r\n\r\nimport ConnectedViewer from './ConnectedViewer.js';\r\nimport PropTypes from 'prop-types';\r\nimport { extensionManager } from './../App.js';\r\nimport Dropzone from 'react-dropzone';\r\nimport filesToStudies from '../lib/filesToStudies';\r\nimport './ViewerLocalFileData.css';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nconst { OHIFStudyMetadata } = metadata;\r\nconst { studyMetadataManager } = utils;\r\n\r\nconst dropZoneLinkDialog = (onDrop, i18n, dir) => {\r\n  return (\r\n    <Dropzone onDrop={onDrop} noDrag>\r\n      {({ getRootProps, getInputProps }) => (\r\n        <span {...getRootProps()} className=\"link-dialog\">\r\n          {dir ? (\r\n            <span>\r\n              {i18n('Load folders')}\r\n              <input\r\n                {...getInputProps()}\r\n                webkitdirectory=\"true\"\r\n                mozdirectory=\"true\"\r\n              />\r\n            </span>\r\n          ) : (\r\n            <span>\r\n              {i18n('Load files')}\r\n              <input {...getInputProps()} />\r\n            </span>\r\n          )}\r\n        </span>\r\n      )}\r\n    </Dropzone>\r\n  );\r\n};\r\n\r\nconst linksDialogMessage = (onDrop, i18n) => {\r\n  return (\r\n    <>\r\n      {i18n('Or click to ')}\r\n      {dropZoneLinkDialog(onDrop, i18n)}\r\n      {i18n(' or ')}\r\n      {dropZoneLinkDialog(onDrop, i18n, true)}\r\n      {i18n(' from dialog')}\r\n    </>\r\n  );\r\n};\r\n\r\nclass ViewerLocalFileData extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.array,\r\n  };\r\n\r\n  state = {\r\n    studies: null,\r\n    loading: false,\r\n    error: null,\r\n  };\r\n\r\n  updateStudies = studies => {\r\n    // Render the viewer when the data is ready\r\n    studyMetadataManager.purge();\r\n\r\n    // Map studies to new format, update metadata manager?\r\n    const updatedStudies = studies.map(study => {\r\n      const studyMetadata = new OHIFStudyMetadata(\r\n        study,\r\n        study.StudyInstanceUID\r\n      );\r\n      const sopClassHandlerModules =\r\n        extensionManager.modules['sopClassHandlerModule'];\r\n\r\n      study.displaySets =\r\n        study.displaySets ||\r\n        studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n\r\n      studyMetadata.forEachDisplaySet(displayset => {\r\n        displayset.localFile = true;\r\n      });\r\n\r\n      studyMetadataManager.add(studyMetadata);\r\n\r\n      return study;\r\n    });\r\n\r\n    this.setState({\r\n      studies: updatedStudies,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const onDrop = async acceptedFiles => {\r\n      this.setState({ loading: true });\r\n\r\n      const studies = await filesToStudies(acceptedFiles);\r\n      const updatedStudies = this.updateStudies(studies);\r\n\r\n      if (!updatedStudies) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ studies: updatedStudies, loading: false });\r\n    };\r\n\r\n    if (this.state.error) {\r\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\r\n    }\r\n\r\n    return (\r\n      <Dropzone onDrop={onDrop} noClick>\r\n        {({ getRootProps, getInputProps }) => (\r\n          <div {...getRootProps()} style={{ width: '100%', height: '100%' }}>\r\n            {this.state.studies ? (\r\n              <ConnectedViewer\r\n                studies={this.state.studies}\r\n                studyInstanceUIDs={\r\n                  this.state.studies &&\r\n                  this.state.studies.map(a => a.StudyInstanceUID)\r\n                }\r\n              />\r\n            ) : (\r\n              <div className={'drag-drop-instructions'}>\r\n                <div className={'drag-drop-contents'}>\r\n                  {this.state.loading ? (\r\n                    <h3>{this.props.t('Loading...')}</h3>\r\n                  ) : (\r\n                    <>\r\n                      <h3>\r\n                        {this.props.t(\r\n                          'Drag and Drop DICOM files here to load them in the Viewer'\r\n                        )}\r\n                      </h3>\r\n                      <h4>{linksDialogMessage(onDrop, this.props.t)}</h4>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('Common')(ViewerLocalFileData);\r\n","import { connect } from 'react-redux';\r\nimport { CineDialog } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport csTools from 'cornerstone-tools';\r\nimport { commandsManager } from './../App.js';\r\n// Our target output kills the `as` and \"import\" throws a keyword error\r\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nconst toolImport = csTools.import;\r\nconst scrollToIndex = toolImport('util/scrollToIndex');\r\nconst { setViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// Why do I need or care about any of this info?\r\n// A dispatch action should be able to pull this at the time of an event?\r\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\r\nconst mapStateToProps = state => {\r\n  // Get activeViewport's `cine` and `stack`\r\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\r\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\r\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\r\n\r\n  const cineData = cine || {\r\n    isPlaying: false,\r\n    cineFrameRate: 24,\r\n  };\r\n\r\n  // New props we're creating?\r\n  return {\r\n    activeEnabledElement: dom,\r\n    activeViewportCineData: cineData,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\r\n  const {\r\n    activeEnabledElement,\r\n    activeViewportCineData,\r\n    activeViewportIndex,\r\n  } = propsFromState;\r\n\r\n  return {\r\n    cineFrameRate: activeViewportCineData.cineFrameRate,\r\n    isPlaying: activeViewportCineData.isPlaying,\r\n    onPlayPauseChanged: isPlaying => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.isPlaying = !cine.isPlaying;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onFrameRateChanged: frameRate => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.cineFrameRate = frameRate;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onClickNextButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\r\n      if (currentImageIdIndex >= imageIds.length - 1) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\r\n    },\r\n    onClickBackButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex } = stackData.data[0];\r\n      if (currentImageIdIndex === 0) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\r\n    },\r\n    onClickSkipToStart: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      scrollToIndex(activeEnabledElement, 0);\r\n    },\r\n    onClickSkipToEnd: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const lastIndex = stackData.data[0].imageIds.length - 1;\r\n      scrollToIndex(activeEnabledElement, lastIndex);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedCineDialog = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(CineDialog);\r\n\r\nexport default ConnectedCineDialog;\r\n","import { LayoutButton } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\n\r\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentLayout: state.viewports.layout,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // TODO: Change if layout switched becomes more complex\r\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\r\n      const viewports = [];\r\n      const numRows = selectedCell.row + 1;\r\n      const numColumns = selectedCell.col + 1;\r\n      const numViewports = numRows * numColumns;\r\n\r\n      for (let i = 0; i < numViewports; i++) {\r\n        // Hacky way to allow users to exit MPR \"mode\"\r\n        const viewport = currentLayout.viewports[i];\r\n        let plugin = viewport && viewport.plugin;\r\n        if (viewport && viewport.vtk) {\r\n          plugin = 'cornerstone';\r\n        }\r\n\r\n        viewports.push({\r\n          plugin,\r\n        });\r\n      }\r\n      const layout = {\r\n        numRows,\r\n        numColumns,\r\n        viewports,\r\n      };\r\n\r\n      const maxActiveIndex = numViewports - 1;\r\n      if (activeViewportIndex > maxActiveIndex) {\r\n        dispatch(setViewportActive(0));\r\n      }\r\n\r\n      dispatch(setLayout(layout));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch) => {\r\n  const onChangeFromDispatch = propsFromDispatch.onChange;\r\n  const { currentLayout, activeViewportIndex } = propsFromState;\r\n\r\n  return {\r\n    onChange: selectedCell =>\r\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\r\n  };\r\n};\r\n\r\nconst ConnectedLayoutButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(LayoutButton);\r\n\r\nexport default ConnectedLayoutButton;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport {\r\n  ExpandableToolMenu,\r\n  RoundedButtonGroup,\r\n  ToolbarButton,\r\n  withModal,\r\n  withDialog,\r\n} from '@ohif/ui';\r\n\r\nimport './ToolbarRow.css';\r\nimport { commandsManager, extensionManager } from './../App.js';\r\n\r\nimport ConnectedCineDialog from './ConnectedCineDialog';\r\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\r\nimport { withAppContext } from '../context/AppContext';\r\n\r\nclass ToolbarRow extends Component {\r\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\r\n  // closed if selected is null/undefined\r\n  static propTypes = {\r\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\r\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\r\n    selectedLeftSidePanel: PropTypes.string.isRequired,\r\n    selectedRightSidePanel: PropTypes.string.isRequired,\r\n    handleSidePanelChange: PropTypes.func.isRequired,\r\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    studies: PropTypes.array,\r\n    t: PropTypes.func.isRequired,\r\n    // NOTE: withDialog, withModal HOCs\r\n    dialog: PropTypes.any,\r\n    modal: PropTypes.any,\r\n  };\r\n\r\n  static defaultProps = {\r\n    studies: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\r\n    // TODO:\r\n    // If it's a tool that can be active... Mark it as active?\r\n    // - Tools that are on/off?\r\n    // - Tools that can be bound to multiple buttons?\r\n\r\n    // Normal ToolbarButtons...\r\n    // Just how high do we need to hoist this state?\r\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\r\n    this.state = {\r\n      toolbarButtons: toolbarButtonDefinitions,\r\n      activeButtons: [],\r\n    };\r\n\r\n    this.seriesPerStudyCount = [];\r\n\r\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\r\n    this._onDerivedDisplaySetsLoadedAndCached = this._onDerivedDisplaySetsLoadedAndCached.bind(\r\n      this\r\n    );\r\n\r\n    this.updateButtonGroups();\r\n  }\r\n\r\n  updateButtonGroups() {\r\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    this.buttonGroups = {\r\n      left: [],\r\n      right: [],\r\n    };\r\n\r\n    // ~ FIND MENU OPTIONS\r\n    panelModules.forEach(panelExtension => {\r\n      const panelModule = panelExtension.module;\r\n      const defaultContexts = Array.from(panelModule.defaultContext);\r\n\r\n      panelModule.menuOptions.forEach(menuOption => {\r\n        const contexts = Array.from(menuOption.context || defaultContexts);\r\n        const hasActiveContext = this.props.activeContexts.some(actx =>\r\n          contexts.includes(actx)\r\n        );\r\n\r\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\r\n        // Note: This does not cleanly handle `studies` prop updating with panel open\r\n        const isDisabled =\r\n          typeof menuOption.isDisabled === 'function' &&\r\n          menuOption.isDisabled(this.props.studies, this.props.activeViewport);\r\n\r\n        if (hasActiveContext && !isDisabled) {\r\n          const menuOptionEntry = {\r\n            value: menuOption.target,\r\n            icon: menuOption.icon,\r\n            bottomLabel: menuOption.label,\r\n          };\r\n          const from = menuOption.from || 'right';\r\n\r\n          this.buttonGroups[from].push(menuOptionEntry);\r\n        }\r\n      });\r\n    });\r\n\r\n    // TODO: This should come from extensions, instead of being baked in\r\n    this.buttonGroups.left.unshift({\r\n      value: 'studies',\r\n      icon: 'th-large',\r\n      bottomLabel: this.props.t('Series'),\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    /*\r\n     * TODO: Improve the way we notify parts of the app\r\n     * that depends on derived display sets to be loaded.\r\n     * (Implement pubsub for better tracking of derived display sets)\r\n     */\r\n    document.addEventListener(\r\n      'deriveddisplaysetsloadedandcached',\r\n      this._onDerivedDisplaySetsLoadedAndCached\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\r\n      'deriveddisplaysetsloadedandcached',\r\n      this._onDerivedDisplaySetsLoadedAndCached\r\n    );\r\n  }\r\n\r\n  _onDerivedDisplaySetsLoadedAndCached() {\r\n    this.updateButtonGroups();\r\n    this.setState({\r\n      toolbarButtons: _getVisibleToolbarButtons.call(this),\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const activeContextsChanged =\r\n      prevProps.activeContexts !== this.props.activeContexts;\r\n\r\n    const prevStudies = prevProps.studies;\r\n    const prevActiveViewport = prevProps.activeViewport;\r\n    const activeViewport = this.props.activeViewport;\r\n    const studies = this.props.studies;\r\n    const seriesPerStudyCount = this.seriesPerStudyCount;\r\n\r\n    let shouldUpdate = false;\r\n\r\n    if (\r\n      prevStudies.length !== studies.length ||\r\n      prevActiveViewport !== activeViewport\r\n    ) {\r\n      shouldUpdate = true;\r\n    } else {\r\n      for (let i = 0; i < studies.length; i++) {\r\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\r\n          seriesPerStudyCount[i] = studies[i].series.length;\r\n\r\n          shouldUpdate = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (shouldUpdate) {\r\n      this.updateButtonGroups();\r\n    }\r\n\r\n    if (activeContextsChanged) {\r\n      this.setState(\r\n        {\r\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\r\n        },\r\n        this.closeCineDialogIfNotApplicable\r\n      );\r\n    }\r\n  }\r\n\r\n  closeCineDialogIfNotApplicable = () => {\r\n    const { dialog } = this.props;\r\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\r\n    if (dialogId) {\r\n      const cineButtonPresent = toolbarButtons.find(\r\n        button => button.options && button.options.behavior === 'CINE'\r\n      );\r\n      if (!cineButtonPresent) {\r\n        dialog.dismiss({ id: dialogId });\r\n        activeButtons = activeButtons.filter(\r\n          button => button.options && button.options.behavior !== 'CINE'\r\n        );\r\n        this.setState({ dialogId: null, activeButtons });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const buttonComponents = _getButtonComponents.call(\r\n      this,\r\n      this.state.toolbarButtons,\r\n      this.state.activeButtons\r\n    );\r\n\r\n    const onPress = (side, value) => {\r\n      this.props.handleSidePanelChange(side, value);\r\n    };\r\n    const onPressLeft = onPress.bind(this, 'left');\r\n    const onPressRight = onPress.bind(this, 'right');\r\n\r\n    return (\r\n      <>\r\n        <div className=\"ToolbarRow\">\r\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\r\n            <RoundedButtonGroup\r\n              options={this.buttonGroups.left}\r\n              value={this.props.selectedLeftSidePanel || ''}\r\n              onValueChanged={onPressLeft}\r\n            />\r\n          </div>\r\n          {buttonComponents}\r\n          <ConnectedLayoutButton />\r\n          <div\r\n            className=\"pull-right m-t-1 rm-x-1\"\r\n            style={{ marginLeft: 'auto' }}\r\n          >\r\n            {this.buttonGroups.right.length && (\r\n              <RoundedButtonGroup\r\n                options={this.buttonGroups.right}\r\n                value={this.props.selectedRightSidePanel || ''}\r\n                onValueChanged={onPressRight}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getCustomButtonComponent(button, activeButtons) {\r\n  const CustomComponent = button.CustomComponent;\r\n  const isValidComponent = typeof CustomComponent === 'function';\r\n\r\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\r\n  if (isValidComponent) {\r\n    const parentContext = this;\r\n    const activeButtonsIds = activeButtons.map(button => button.id);\r\n    const isActive = activeButtonsIds.includes(button.id);\r\n\r\n    return (\r\n      <CustomComponent\r\n        parentContext={parentContext}\r\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\r\n        button={button}\r\n        key={button.id}\r\n        activeButtons={activeButtonsIds}\r\n        isActive={isActive}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getExpandableButtonComponent(button, activeButtons) {\r\n  // Iterate over button definitions and update `onClick` behavior\r\n  let activeCommand;\r\n  const childButtons = button.buttons.map(childButton => {\r\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\r\n\r\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\r\n      activeCommand = childButton.id;\r\n    }\r\n\r\n    return childButton;\r\n  });\r\n\r\n  return (\r\n    <ExpandableToolMenu\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      buttons={childButtons}\r\n      activeCommand={activeCommand}\r\n    />\r\n  );\r\n}\r\n\r\nfunction _getDefaultButtonComponent(button, activeButtons) {\r\n  return (\r\n    <ToolbarButton\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      onClick={_handleToolbarButtonClick.bind(this, button)}\r\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\r\n    />\r\n  );\r\n}\r\n/**\r\n * Determine which extension buttons should be showing, if they're\r\n * active, and what their onClick behavior should be.\r\n */\r\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\r\n  const _this = this;\r\n  return toolbarButtons.map(button => {\r\n    const hasCustomComponent = button.CustomComponent;\r\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\r\n\r\n    if (hasCustomComponent) {\r\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    if (hasNestedButtonDefinitions) {\r\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\r\n  });\r\n}\r\n\r\n/**\r\n * TODO: DEPRECATE\r\n * This is used exclusively in `extensions/cornerstone/src`\r\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\r\n *\r\n * A handy way for us to handle different button types. IE. firing commands for\r\n * buttons, or initiation built in behavior.\r\n *\r\n * @param {*} button\r\n * @param {*} evt\r\n * @param {*} props\r\n */\r\nfunction _handleToolbarButtonClick(button, evt, props) {\r\n  const { activeButtons } = this.state;\r\n\r\n  if (button.commandName) {\r\n    const options = Object.assign({ evt }, button.commandOptions);\r\n    commandsManager.runCommand(button.commandName, options);\r\n  }\r\n\r\n  // TODO: Use Types ENUM\r\n  // TODO: We can update this to be a `getter` on the extension to query\r\n  //       For the active tools after we apply our updates?\r\n  if (button.type === 'setToolActive') {\r\n    const toggables = activeButtons.filter(\r\n      ({ options }) => options && !options.togglable\r\n    );\r\n    this.setState({ activeButtons: [...toggables, button] });\r\n  } else if (button.type === 'builtIn') {\r\n    this._handleBuiltIn(button);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _getVisibleToolbarButtons() {\r\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\r\n  const toolbarButtonDefinitions = [];\r\n\r\n  toolbarModules.forEach(extension => {\r\n    const { definitions, defaultContext } = extension.module;\r\n    definitions.forEach(definition => {\r\n      const context = definition.context || defaultContext;\r\n\r\n      if (this.props.activeContexts.includes(context)) {\r\n        toolbarButtonDefinitions.push(definition);\r\n      }\r\n    });\r\n  });\r\n\r\n  return toolbarButtonDefinitions;\r\n}\r\n\r\nfunction _handleBuiltIn(button) {\r\n  /* TODO: Keep cine button active until its unselected. */\r\n  const { dialog, t } = this.props;\r\n  const { dialogId } = this.state;\r\n  const { id, options } = button;\r\n\r\n  if (options.behavior === 'CINE') {\r\n    if (dialogId) {\r\n      dialog.dismiss({ id: dialogId });\r\n      this.setState(state => ({\r\n        dialogId: null,\r\n        activeButtons: [\r\n          ...state.activeButtons.filter(button => button.id !== id),\r\n        ],\r\n      }));\r\n    } else {\r\n      const spacing = 20;\r\n      const { x, y } = document\r\n        .querySelector(`.ViewerMain`)\r\n        .getBoundingClientRect();\r\n      const newDialogId = dialog.create({\r\n        content: ConnectedCineDialog,\r\n        defaultPosition: {\r\n          x: x + spacing || 0,\r\n          y: y + spacing || 0,\r\n        },\r\n      });\r\n      this.setState(state => ({\r\n        dialogId: newDialogId,\r\n        activeButtons: [...state.activeButtons, button],\r\n      }));\r\n    }\r\n  }\r\n\r\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\r\n    commandsManager.runCommand('showDownloadViewportModal', {\r\n      title: t('Download High Quality Image'),\r\n    });\r\n  }\r\n}\r\n\r\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\r\n  withModal(withDialog(withAppContext(ToolbarRow)))\r\n);\r\n","import OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { StudyBrowser } from '@ohif/ui';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport findDisplaySetByUID from './findDisplaySetByUID';\r\nimport { servicesManager } from './../App.js';\r\n\r\nconst { studyMetadataManager } = OHIF.utils;\r\n\r\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// TODO\r\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\r\n// - Pass in errors and stack loading progress from Redux\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // If we know that the stack loading progress details have changed,\r\n  // we can try to update the component state so that the thumbnail\r\n  // progress bar is updated\r\n  const stackLoadingProgressMap = state.loading.progress;\r\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\r\n\r\n  studiesWithLoadingData.forEach(study => {\r\n    study.thumbnails.forEach(data => {\r\n      const { displaySetInstanceUID } = data;\r\n      const stackId = `StackProgress:${displaySetInstanceUID}`;\r\n      const stackProgressData = stackLoadingProgressMap[stackId];\r\n\r\n      let stackPercentComplete = 0;\r\n      if (stackProgressData) {\r\n        stackPercentComplete = stackProgressData.percentComplete;\r\n      }\r\n\r\n      data.stackPercentComplete = stackPercentComplete;\r\n    });\r\n  });\r\n\r\n  return {\r\n    studies: studiesWithLoadingData,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onThumbnailClick: displaySetInstanceUID => {\r\n      let displaySet = findDisplaySetByUID(\r\n        ownProps.studyMetadata,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      if (displaySet.isDerived) {\r\n        const { Modality } = displaySet;\r\n        if (Modality === 'SEG' && servicesManager) {\r\n          const {LoggerService, UINotificationService} = servicesManager.services;\r\n          const onDisplaySetLoadFailureHandler = error => {\r\n            LoggerService.error({ error, message: error.message });\r\n            UINotificationService.show({\r\n              title: 'DICOM Segmentation Loader',\r\n              message: error.message,\r\n              type: 'error',\r\n              autoClose: true,\r\n            });\r\n          };\r\n\r\n          const {referencedDisplaySet, activatedLabelmapPromise} = displaySet.getSourceDisplaySet(\r\n            ownProps.studyMetadata,\r\n            true,\r\n            onDisplaySetLoadFailureHandler\r\n          );\r\n          displaySet = referencedDisplaySet;\r\n\r\n          activatedLabelmapPromise.then((activatedLabelmapIndex) => {\r\n            const selectionFired = new CustomEvent(\"extensiondicomsegmentationsegselected\", {\r\n              \"detail\": {\"activatedLabelmapIndex\":activatedLabelmapIndex}\r\n            });\r\n            document.dispatchEvent(selectionFired);\r\n          });\r\n\r\n        } else {\r\n          displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\r\n        }\r\n\r\n        if (!displaySet) {\r\n          throw new Error(\r\n            `Referenced series for ${Modality} dataset not present.`\r\n          );\r\n        }\r\n\r\n        if (!displaySet) {\r\n          throw new Error('Source data not present');\r\n        }\r\n      }\r\n\r\n      dispatch(setActiveViewportSpecificData(displaySet));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedStudyBrowser = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(StudyBrowser);\r\n\r\nexport default ConnectedStudyBrowser;\r\n","/**\r\n * Finds displaySet by UID across all displaySets inside studyMetadata\r\n * @param {Array} studyMetadata\r\n * @param {string} displaySetInstanceUID\r\n */\r\nexport default function findDisplaySetByUID(\r\n  studyMetadata,\r\n  displaySetInstanceUID\r\n) {\r\n  if (!Array.isArray(studyMetadata)) return null;\r\n\r\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\r\n    let currentDisplaySet = [];\r\n    if (current && Array.isArray(current.displaySets)) {\r\n      currentDisplaySet = current.displaySets;\r\n    }\r\n    return all.concat(currentDisplaySet);\r\n  }, []);\r\n\r\n  const bySetInstanceUID = ds =>\r\n    ds.displaySetInstanceUID === displaySetInstanceUID;\r\n\r\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\r\n  return displaySet || null;\r\n}\r\n","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './ViewportPane.css';\r\n\r\nconst ViewportPane = function (props) {\r\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\r\n  const [{ hovered, highlighted }, drop] = useDrop({\r\n    accept: 'thumbnail',\r\n    drop: (droppedItem, monitor) => {\r\n      const canDrop = monitor.canDrop();\r\n      const isOver = monitor.isOver();\r\n\r\n      if (canDrop && isOver && onDrop) {\r\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\r\n\r\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\r\n      }\r\n    },\r\n    // Monitor, and collect props.\r\n    // Returned as values by `useDrop`\r\n    collect: monitor => ({\r\n      highlighted: monitor.canDrop(),\r\n      hovered: monitor.isOver(),\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        'viewport-drop-target',\r\n        { hovered: hovered },\r\n        { highlighted: highlighted },\r\n        propClassName\r\n      )}\r\n      ref={drop}\r\n      data-cy={`viewport-container-${viewportIndex}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportPane.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  onDrop: PropTypes.func.isRequired,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default ViewportPane;\r\n","import './ViewportGrid.css';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { utils } from '@ohif/core';\r\nimport { useSnackbarContext, useLogger } from '@ohif/ui';\r\n//\r\nimport ViewportPane from './ViewportPane.js';\r\nimport DefaultViewport from './DefaultViewport.js';\r\nimport EmptyViewport from './EmptyViewport.js';\r\n\r\nconst { loadAndCacheDerivedDisplaySets } = utils;\r\n\r\nconst ViewportGrid = function(props) {\r\n  const {\r\n    activeViewportIndex,\r\n    availablePlugins,\r\n    defaultPlugin: defaultPluginName,\r\n    layout,\r\n    numRows,\r\n    numColumns,\r\n    setViewportData,\r\n    studies,\r\n    viewportData,\r\n    children,\r\n    isStudyLoaded,\r\n  } = props;\r\n\r\n  const rowSize = 100 / numRows;\r\n  const colSize = 100 / numColumns;\r\n\r\n  // http://grid.malven.co/\r\n  if (!viewportData || !viewportData.length) {\r\n    return null;\r\n  }\r\n\r\n  const snackbar = useSnackbarContext();\r\n  const logger = useLogger();\r\n\r\n  useEffect(() => {\r\n    if (isStudyLoaded) {\r\n      viewportData.forEach(displaySet => {\r\n        loadAndCacheDerivedDisplaySets(displaySet, studies, logger, snackbar);\r\n      });\r\n    }\r\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\r\n\r\n  const getViewportPanes = () =>\r\n    layout.viewports.map((layout, viewportIndex) => {\r\n      const displaySet = viewportData[viewportIndex];\r\n\r\n      if (!displaySet) {\r\n        return null;\r\n      }\r\n\r\n      const data = {\r\n        displaySet,\r\n        studies,\r\n      };\r\n\r\n      // JAMES TODO:\r\n\r\n      // Use whichever plugin is currently in use in the panel\r\n      // unless nothing is specified. If nothing is specified\r\n      // and the display set has a plugin specified, use that.\r\n      //\r\n      // TODO: Change this logic to:\r\n      // - Plugins define how capable they are of displaying a SopClass\r\n      // - When updating a panel, ensure that the currently enabled plugin\r\n      // in the viewport is capable of rendering this display set. If not\r\n      // then use the most capable available plugin\r\n\r\n      const pluginName =\r\n        !layout.plugin && displaySet && displaySet.plugin\r\n          ? displaySet.plugin\r\n          : layout.plugin;\r\n\r\n      const ViewportComponent = _getViewportComponent(\r\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\r\n        viewportIndex,\r\n        children,\r\n        availablePlugins,\r\n        pluginName,\r\n        defaultPluginName\r\n      );\r\n\r\n      return (\r\n        <ViewportPane\r\n          onDrop={setViewportData}\r\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\r\n          className={classNames('viewport-container', {\r\n            active: activeViewportIndex === viewportIndex,\r\n          })}\r\n          key={viewportIndex}\r\n        >\r\n          {ViewportComponent}\r\n        </ViewportPane>\r\n      );\r\n    });\r\n\r\n  const ViewportPanes = React.useMemo(getViewportPanes, [\r\n    layout,\r\n    viewportData,\r\n    studies,\r\n    children,\r\n    availablePlugins,\r\n    defaultPluginName,\r\n    setViewportData,\r\n    activeViewportIndex,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      data-cy=\"viewprt-grid\"\r\n      style={{\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\r\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\r\n        height: '100%',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      {ViewportPanes}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportGrid.propTypes = {\r\n  viewportData: PropTypes.array.isRequired,\r\n  supportsDrop: PropTypes.bool.isRequired,\r\n  activeViewportIndex: PropTypes.number.isRequired,\r\n  layout: PropTypes.object.isRequired,\r\n  availablePlugins: PropTypes.object.isRequired,\r\n  setViewportData: PropTypes.func.isRequired,\r\n  studies: PropTypes.array,\r\n  children: PropTypes.node,\r\n  defaultPlugin: PropTypes.string,\r\n  numRows: PropTypes.number.isRequired,\r\n  numColumns: PropTypes.number.isRequired,\r\n};\r\n\r\nViewportGrid.defaultProps = {\r\n  viewportData: [],\r\n  numRows: 1,\r\n  numColumns: 1,\r\n  layout: {\r\n    viewports: [{}],\r\n  },\r\n  activeViewportIndex: 0,\r\n  supportsDrop: true,\r\n  availablePlugins: {\r\n    DefaultViewport,\r\n  },\r\n  defaultPlugin: 'defaultViewportPlugin',\r\n};\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} plugin\r\n * @param {*} viewportData\r\n * @param {*} viewportIndex\r\n * @param {*} children\r\n * @returns\r\n */\r\nfunction _getViewportComponent(\r\n  viewportData,\r\n  viewportIndex,\r\n  children,\r\n  availablePlugins,\r\n  pluginName,\r\n  defaultPluginName\r\n) {\r\n  if (viewportData.displaySet) {\r\n    pluginName = pluginName || defaultPluginName;\r\n    const ViewportComponent = availablePlugins[pluginName];\r\n\r\n    if (!ViewportComponent) {\r\n      throw new Error(\r\n        `No Viewport Component available for name ${pluginName}.\r\n         Available plugins: ${JSON.stringify(availablePlugins)}`\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ViewportComponent\r\n        viewportData={viewportData}\r\n        viewportIndex={viewportIndex}\r\n        children={[children]}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <EmptyViewport />;\r\n}\r\n\r\nexport default ViewportGrid;\r\n","/**\r\n *\r\n *\r\n * @export\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function DefaultViewport(props) {\r\n  return <div>{JSON.stringify(props)}</div>;\r\n}\r\n","import ViewportGrid from './ViewportGrid.js';\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { extensionManager } from './../../App.js';\r\nimport memoize from 'lodash/memoize';\r\n\r\nconst getAvailableViewportModules = memoize(viewportModules => {\r\n  const availableViewportModules = {};\r\n  viewportModules.forEach(moduleDefinition => {\r\n    availableViewportModules[moduleDefinition.extensionId] =\r\n      moduleDefinition.module;\r\n  });\r\n  return availableViewportModules;\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\r\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\r\n\r\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\r\n  let defaultPlugin;\r\n  if (viewportModules.length) {\r\n    defaultPlugin = viewportModules[0].extensionId;\r\n  }\r\n\r\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\r\n\r\n  return {\r\n    numRows,\r\n    numColumns,\r\n    layout,\r\n    activeViewportIndex,\r\n    // TODO: rename `availableViewportModules`\r\n    availablePlugins: availableViewportModules,\r\n    // TODO: rename `defaultViewportModule`\r\n    defaultPlugin,\r\n  };\r\n};\r\n\r\nconst ConnectedViewportGrid = connect(\r\n  mapStateToProps,\r\n  null\r\n)(ViewportGrid);\r\n\r\nexport default ConnectedViewportGrid;\r\n","import './ViewerMain.css';\r\nimport { servicesManager } from './../App.js';\r\nimport { Component } from 'react';\r\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport memoize from 'lodash/memoize';\r\nimport _values from 'lodash/values';\r\n\r\nvar values = memoize(_values);\r\n\r\nclass ViewerMain extends Component {\r\n  static propTypes = {\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    studies: PropTypes.array,\r\n    viewportSpecificData: PropTypes.object.isRequired,\r\n    layout: PropTypes.object.isRequired,\r\n    setViewportSpecificData: PropTypes.func.isRequired,\r\n    clearViewportSpecificData: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      displaySets: [],\r\n    };\r\n  }\r\n\r\n  getDisplaySets(studies) {\r\n    const displaySets = [];\r\n    studies.forEach(study => {\r\n      study.displaySets.forEach(dSet => {\r\n        if (!dSet.plugin) {\r\n          dSet.plugin = 'cornerstone';\r\n        }\r\n        displaySets.push(dSet);\r\n      });\r\n    });\r\n\r\n    return displaySets;\r\n  }\r\n\r\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\r\n    const study = studies.find(study => {\r\n      return study.StudyInstanceUID === StudyInstanceUID;\r\n    });\r\n\r\n    if (!study) {\r\n      return;\r\n    }\r\n\r\n    return study.displaySets.find(displaySet => {\r\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Add beforeUnload event handler to check for unsaved changes\r\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n\r\n    // Get all the display sets for the viewer studies\r\n    if (this.props.studies) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevViewportAmount = prevProps.layout.viewports.length;\r\n    const viewportAmount = this.props.layout.viewports.length;\r\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\r\n\r\n    if (\r\n      this.props.studies !== prevProps.studies ||\r\n      (viewportAmount !== prevViewportAmount && !isVtk)\r\n    ) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  fillEmptyViewportPanes = () => {\r\n    // TODO: Here is the entry point for filling viewports on load.\r\n    const dirtyViewportPanes = [];\r\n    const { layout, viewportSpecificData } = this.props;\r\n    const { displaySets } = this.state;\r\n\r\n    if (!displaySets || !displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < layout.viewports.length; i++) {\r\n      const viewportPane = viewportSpecificData[i];\r\n      const isNonEmptyViewport =\r\n        viewportPane &&\r\n        viewportPane.StudyInstanceUID &&\r\n        viewportPane.displaySetInstanceUID;\r\n\r\n      if (isNonEmptyViewport) {\r\n        dirtyViewportPanes.push({\r\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\r\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      const foundDisplaySet =\r\n        displaySets.find(\r\n          ds =>\r\n            !dirtyViewportPanes.some(\r\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\r\n            )\r\n        ) || displaySets[displaySets.length - 1];\r\n\r\n      dirtyViewportPanes.push(foundDisplaySet);\r\n    }\r\n\r\n    dirtyViewportPanes.forEach((vp, i) => {\r\n      if (vp && vp.StudyInstanceUID) {\r\n        this.setViewportData({\r\n          viewportIndex: i,\r\n          StudyInstanceUID: vp.StudyInstanceUID,\r\n          displaySetInstanceUID: vp.displaySetInstanceUID,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  setViewportData = ({\r\n    viewportIndex,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n  }) => {\r\n    let displaySet = this.findDisplaySet(\r\n      this.props.studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    if (displaySet.isDerived) {\r\n      const { Modality } = displaySet;\r\n      if (Modality === 'SEG' && servicesManager) {\r\n        const {LoggerService, UINotificationService} = servicesManager.services;\r\n        const onDisplaySetLoadFailureHandler = error => {\r\n          LoggerService.error({ error, message: error.message });\r\n          UINotificationService.show({\r\n            title: 'DICOM Segmentation Loader',\r\n            message: error.message,\r\n            type: 'error',\r\n            autoClose: true,\r\n          });\r\n        };\r\n\r\n        const {referencedDisplaySet} = displaySet.getSourceDisplaySet(\r\n          this.props.studies,\r\n          true,\r\n          onDisplaySetLoadFailureHandler\r\n        );\r\n        displaySet = referencedDisplaySet;\r\n\r\n      } else {\r\n        displaySet = displaySet.getSourceDisplaySet(this.props.studies);\r\n      }\r\n\r\n      if (!displaySet) {\r\n        throw new Error(\r\n          `Referenced series for ${Modality} dataset not present.`\r\n        );\r\n      }\r\n    }\r\n\r\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\r\n  };\r\n\r\n  render() {\r\n    const { viewportSpecificData } = this.props;\r\n    const viewportData = values(viewportSpecificData);\r\n\r\n    return (\r\n      <div className=\"ViewerMain\">\r\n        {this.state.displaySets.length && (\r\n          <ConnectedViewportGrid\r\n            isStudyLoaded={this.props.isStudyLoaded}\r\n            studies={this.props.studies}\r\n            viewportData={viewportData}\r\n            setViewportData={this.setViewportData}\r\n          >\r\n            {/* Children to add to each viewport that support children */}\r\n          </ConnectedViewportGrid>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear the entire viewport specific data\r\n    const { viewportSpecificData } = this.props;\r\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\r\n      this.props.clearViewportSpecificData(viewportIndex);\r\n    });\r\n\r\n    // TODO: These don't have to be viewer specific?\r\n    // Could qualify for other routes?\r\n    // hotkeys.destroy();\r\n\r\n    // Remove beforeUnload event handler...\r\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n    // Destroy the synchronizer used to update reference lines\r\n    //OHIF.viewer.updateImageSynchronizer.destroy();\r\n    // TODO: Instruct all plugins to clean up themselves\r\n    //\r\n    // Clear references to all stacks in the StackManager\r\n    //StackManager.clearStacks();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.Studies collection\r\n    //OHIF.viewer.Studies.removeAll();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.StudyMetadataList collection\r\n    //OHIF.viewer.StudyMetadataList.removeAll();\r\n  }\r\n}\r\n\r\nexport default ViewerMain;\r\n","import OHIF from '@ohif/core';\r\nimport ViewerMain from './ViewerMain';\r\nimport { connect } from 'react-redux';\r\n\r\nconst {\r\n  setViewportSpecificData,\r\n  clearViewportSpecificData,\r\n} = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\r\n\r\n  return {\r\n    activeViewportIndex,\r\n    layout,\r\n    viewportSpecificData,\r\n    viewports: state.viewports,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerMain = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerMain);\r\n\r\nexport default ConnectedViewerMain;\r\n","import './SidePanel.css';\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nconst SidePanel = ({ from, isOpen, children, width }) => {\r\n  const fromSideClass = from === 'right' ? 'from-right' : 'from-left';\r\n\r\n  const styles = width\r\n    ? {\r\n        maxWidth: width,\r\n        marginRight: isOpen ? '0' : Number.parseInt(width) * -1,\r\n      }\r\n    : {};\r\n\r\n  return (\r\n    <section\r\n      style={styles}\r\n      className={classNames('sidepanel', fromSideClass, {\r\n        'is-open': isOpen,\r\n      })}\r\n    >\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSidePanel.propTypes = {\r\n  from: PropTypes.string.isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  children: PropTypes.node,\r\n  width: PropTypes.string,\r\n};\r\n\r\nexport default SidePanel;\r\n","import React, { useState } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { ErrorBoundary, Icon } from '@ohif/ui';\r\nimport { servicesManager } from './../../App';\r\n\r\nimport './ErrorBoundaryDialog.css';\r\n\r\nconst { UIModalService } = servicesManager.services;\r\n\r\nconst ErrorBoundaryDialog = ({ context, children }) => {\r\n  const handleOnError = (error, componentStack) => {\r\n    const ErrorDialog = () => {\r\n      const [open, setOpen] = useState(false);\r\n\r\n      return (\r\n        <div className=\"ErrorFallback\" role=\"alert\">\r\n          <div className=\"ErrorBoundaryDialog\">\r\n            <h3 className=\"ErrorBoundaryDialogTitle\">\r\n              {context}: <span>{error.message}</span>\r\n            </h3>\r\n          </div>\r\n          <button\r\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\r\n            onClick={() => setOpen(s => !s)}\r\n          >\r\n            <Icon\r\n              name=\"chevron-down\"\r\n              className={classnames('ErrorBoundaryDialogIcon', {\r\n                opened: open,\r\n              })}\r\n            />\r\n            Stack Trace\r\n          </button>\r\n\r\n          {open && <pre>{componentStack}</pre>}\r\n        </div>\r\n      );\r\n    };\r\n\r\n    UIModalService.show({\r\n      content: ErrorDialog,\r\n      title: `Something went wrong in ${context}`,\r\n    });\r\n  };\r\n\r\n  const fallbackComponent = () => (\r\n    <div className=\"ErrorFallback\" role=\"alert\">\r\n      <p>\r\n        Error rendering {context}. <br /> Check the browser console for more\r\n        details.\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ErrorBoundary\r\n      fallbackComponent={fallbackComponent}\r\n      context={context}\r\n      onError={handleOnError}\r\n    >\r\n      {children}\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nErrorBoundaryDialog.propTypes = {\r\n  context: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { useLogger } from '@ohif/ui';\r\n\r\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\r\nimport { withDialog } from '@ohif/ui';\r\nimport moment from 'moment';\r\nimport ConnectedHeader from './ConnectedHeader.js';\r\nimport ToolbarRow from './ToolbarRow.js';\r\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\r\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\r\nimport SidePanel from './../components/SidePanel.js';\r\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\r\nimport { extensionManager } from './../App.js';\r\nimport { ReconstructionIssues } from './../../../core/src/enums.js';\r\nimport dcmjs from 'dcmjs';\r\n\r\n// Contexts\r\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\r\nimport UserManagerContext from '../context/UserManagerContext';\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport './Viewer.css';\r\nimport { finished } from 'stream';\r\nimport { cornerstoneWADOImageLoader } from 'cornerstone-wado-image-loader';\r\n\r\nclass Viewer extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        StudyInstanceUID: PropTypes.string.isRequired,\r\n        StudyDate: PropTypes.string,\r\n        PatientID: PropTypes.string,\r\n        displaySets: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            displaySetInstanceUID: PropTypes.string.isRequired,\r\n            SeriesDescription: PropTypes.string,\r\n            SeriesNumber: PropTypes.number,\r\n            InstanceNumber: PropTypes.number,\r\n            numImageFrames: PropTypes.number,\r\n            Modality: PropTypes.string.isRequired,\r\n            images: PropTypes.arrayOf(\r\n              PropTypes.shape({\r\n                getImageId: PropTypes.func.isRequired,\r\n              })\r\n            ),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n    studyInstanceUIDs: PropTypes.array,\r\n    activeServer: PropTypes.shape({\r\n      type: PropTypes.string,\r\n      wadoRoot: PropTypes.string,\r\n    }),\r\n    onTimepointsUpdated: PropTypes.func,\r\n    onMeasurementsUpdated: PropTypes.func,\r\n    // window.store.getState().viewports.viewportSpecificData\r\n    viewports: PropTypes.object.isRequired,\r\n    // window.store.getState().viewports.activeViewportIndex\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    isStudyLoaded: PropTypes.bool,\r\n    dialog: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { activeServer } = this.props;\r\n    const server = Object.assign({}, activeServer);\r\n\r\n    OHIF.measurements.MeasurementApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: DICOMSR.retrieveMeasurements,\r\n        store: DICOMSR.storeMeasurements,\r\n      },\r\n      server,\r\n    });\r\n\r\n    OHIF.measurements.TimepointApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: this.retrieveTimepoints,\r\n        store: this.storeTimepoints,\r\n        remove: this.removeTimepoint,\r\n        update: this.updateTimepoint,\r\n        disassociate: this.disassociateStudy,\r\n      },\r\n    });\r\n\r\n    this._getActiveViewport = this._getActiveViewport.bind(this);\r\n  }\r\n\r\n  state = {\r\n    isLeftSidePanelOpen: true,\r\n    isRightSidePanelOpen: false,\r\n    selectedRightSidePanel: '',\r\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\r\n    thumbnails: [],\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.dialog) {\r\n      this.props.dialog.dismissAll();\r\n    }\r\n  }\r\n\r\n  retrieveTimepoints = filter => {\r\n    OHIF.log.info('retrieveTimepoints');\r\n\r\n    // Get the earliest and latest study date\r\n    let earliestDate = new Date().toISOString();\r\n    let latestDate = new Date().toISOString();\r\n    if (this.props.studies) {\r\n      latestDate = new Date('1000-01-01').toISOString();\r\n      this.props.studies.forEach(study => {\r\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\r\n        if (StudyDate < earliestDate) {\r\n          earliestDate = StudyDate;\r\n        }\r\n        if (StudyDate > latestDate) {\r\n          latestDate = StudyDate;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Return a generic timepoint\r\n    return Promise.resolve([\r\n      {\r\n        timepointType: 'baseline',\r\n        timepointId: 'TimepointId',\r\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\r\n        PatientID: filter.PatientID,\r\n        earliestDate,\r\n        latestDate,\r\n        isLocked: false,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  storeTimepoints = timepointData => {\r\n    OHIF.log.info('storeTimepoints');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  updateTimepoint = (timepointData, query) => {\r\n    OHIF.log.info('updateTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  removeTimepoint = timepointId => {\r\n    OHIF.log.info('removeTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\r\n    OHIF.log.info('disassociateStudy');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  onTimepointsUpdated = timepoints => {\r\n    if (this.props.onTimepointsUpdated) {\r\n      this.props.onTimepointsUpdated(timepoints);\r\n    }\r\n  };\r\n\r\n  onMeasurementsUpdated = measurements => {\r\n    if (this.props.onMeasurementsUpdated) {\r\n      this.props.onMeasurementsUpdated(measurements);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { studies, isStudyLoaded } = this.props;\r\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\r\n    const currentTimepointId = 'TimepointId';\r\n\r\n    const timepointApi = new TimepointApi(currentTimepointId, {\r\n      onTimepointsUpdated: this.onTimepointsUpdated,\r\n    });\r\n\r\n    const measurementApi = new MeasurementApi(timepointApi, {\r\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\r\n    });\r\n\r\n    this.currentTimepointId = currentTimepointId;\r\n    this.timepointApi = timepointApi;\r\n    this.measurementApi = measurementApi;\r\n\r\n    if (studies) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n\r\n      timepointApi.retrieveTimepoints({ PatientID });\r\n      if (isStudyLoaded) {\r\n        this.measurementApi.retrieveMeasurements(PatientID, [\r\n          currentTimepointId,\r\n        ]);\r\n      }\r\n\r\n      const activeViewport = this.props.viewports[this.props.activeViewportIndex];\r\n      const activeDisplaySetInstanceUID =\r\n        activeViewport ? activeViewport.displaySetInstanceUID : undefined;\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      studies,\r\n      isStudyLoaded,\r\n      activeViewportIndex,\r\n      viewports\r\n    } = this.props;\r\n\r\n    const activeViewport = viewports[activeViewportIndex];\r\n    const activeDisplaySetInstanceUID =\r\n      activeViewport ? activeViewport.displaySetInstanceUID : undefined;\r\n\r\n    const prevActiveViewport = prevProps.viewports[prevProps.activeViewportIndex];\r\n    const prevActiveDisplaySetInstanceUID =\r\n      prevActiveViewport ? prevActiveViewport.displaySetInstanceUID : undefined;\r\n\r\n    if (studies !== prevProps.studies ||\r\n      activeViewportIndex !== prevProps.activeViewportIndex ||\r\n      activeDisplaySetInstanceUID !== prevActiveDisplaySetInstanceUID\r\n      ) {\r\n\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\r\n      });\r\n    }\r\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n      const { currentTimepointId } = this;\r\n\r\n      this.timepointApi.retrieveTimepoints({ PatientID });\r\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\r\n    }\r\n  }\r\n\r\n  _getActiveViewport() {\r\n    return this.props.viewports[this.props.activeViewportIndex];\r\n  }\r\n\r\n  render() {\r\n    let VisiblePanelLeft, VisiblePanelRight;\r\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    panelExtensions.forEach(panelExt => {\r\n      panelExt.module.components.forEach(comp => {\r\n        if (comp.id === this.state.selectedRightSidePanel) {\r\n          VisiblePanelRight = comp.component;\r\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\r\n          VisiblePanelLeft = comp.component;\r\n        }\r\n      });\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {/* HEADER */}\r\n        <WhiteLabelingContext.Consumer>\r\n          {whiteLabeling => (\r\n            <UserManagerContext.Consumer>\r\n              {userManager => (\r\n                <AppContext.Consumer>\r\n                  {appContext => (\r\n                    <ConnectedHeader\r\n                      linkText={\r\n                        appContext.appConfig.showStudyList\r\n                          ? 'Study List'\r\n                          : undefined\r\n                      }\r\n                      linkPath={\r\n                        appContext.appConfig.showStudyList ? '/' : undefined\r\n                      }\r\n                      userManager={userManager}\r\n                    >\r\n                      {whiteLabeling &&\r\n                        whiteLabeling.createLogoComponentFn &&\r\n                        whiteLabeling.createLogoComponentFn(React)}\r\n                    </ConnectedHeader>\r\n                  )}\r\n                </AppContext.Consumer>\r\n              )}\r\n            </UserManagerContext.Consumer>\r\n          )}\r\n        </WhiteLabelingContext.Consumer>\r\n\r\n        {/* TOOLBAR */}\r\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\r\n          <ToolbarRow\r\n            activeViewport={\r\n              this.props.viewports[this.props.activeViewportIndex]\r\n            }\r\n            isDerivedDisplaySetsLoaded={this.props.isDerivedDisplaySetsLoaded}\r\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\r\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\r\n            selectedLeftSidePanel={\r\n              this.state.isLeftSidePanelOpen\r\n                ? this.state.selectedLeftSidePanel\r\n                : ''\r\n            }\r\n            selectedRightSidePanel={\r\n              this.state.isRightSidePanelOpen\r\n                ? this.state.selectedRightSidePanel\r\n                : ''\r\n            }\r\n            handleSidePanelChange={(side, selectedPanel) => {\r\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\r\n              const openKey = `is${sideClicked}SidePanelOpen`;\r\n              const selectedKey = `selected${sideClicked}SidePanel`;\r\n              const updatedState = Object.assign({}, this.state);\r\n\r\n              const isOpen = updatedState[openKey];\r\n              const prevSelectedPanel = updatedState[selectedKey];\r\n              // RoundedButtonGroup returns `null` if selected button is clicked\r\n              const isSameSelectedPanel =\r\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\r\n\r\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\r\n\r\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\r\n              if (isClosedOrShouldClose) {\r\n                updatedState[openKey] = !updatedState[openKey];\r\n              }\r\n\r\n              this.setState(updatedState);\r\n            }}\r\n            studies={this.props.studies}\r\n          />\r\n        </ErrorBoundaryDialog>\r\n\r\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\r\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\r\n\r\n        {/* VIEWPORTS + SIDEPANELS */}\r\n        <div className=\"FlexboxLayout\">\r\n          {/* LEFT */}\r\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\r\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\r\n              {VisiblePanelLeft ? (\r\n                <VisiblePanelLeft\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              ) : (\r\n                <ConnectedStudyBrowser\r\n                  studies={this.state.thumbnails}\r\n                  studyMetadata={this.props.studies}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n\r\n          {/* MAIN */}\r\n          <div className={classNames('main-content')}>\r\n            <ErrorBoundaryDialog context=\"ViewerMain\">\r\n              <ConnectedViewerMain\r\n                studies={this.props.studies}\r\n                isStudyLoaded={this.props.isStudyLoaded}\r\n              />\r\n            </ErrorBoundaryDialog>\r\n          </div>\r\n\r\n          {/* RIGHT */}\r\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\r\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\r\n              {VisiblePanelRight && (\r\n                <VisiblePanelRight\r\n                  isOpen={this.state.isRightSidePanelOpen}\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                  activeViewport={\r\n                    this.props.viewports[this.props.activeViewportIndex]\r\n                  }\r\n                  getActiveViewport={this._getActiveViewport}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withDialog(Viewer);\r\n\r\n/**\r\n * Async function to check if there are any inconsistences in the series.\r\n *\r\n * For segmentation checks that the geometry is consistent with the source images:\r\n * 1) no frames out of plane;\r\n * 2) have the same width and height.\r\n *\r\n * For reconstructable 3D volume:\r\n * 1) Is series multiframe?\r\n * 2) Do the frames have different dimensions/number of components/orientations?\r\n * 3) Has the series any missing frames or irregular spacing?\r\n * 4) Is the series 4D?\r\n *\r\n * If not reconstructable, MPR is disabled.\r\n * The actual computations are done in isDisplaySetReconstructable.\r\n *\r\n * @param {*object} displaySet\r\n * @returns {[string]} an array of strings containing the warnings\r\n */\r\nconst _checkForSeriesInconsistencesWarnings = async function (displaySet, studies) {\r\n  if (displaySet.inconsistencyWarnings) {\r\n    // warnings already checked and cached in displaySet\r\n    return displaySet.inconsistencyWarnings;\r\n  }\r\n  const inconsistencyWarnings = [];\r\n\r\n  if (displaySet.Modality !== 'SEG') {\r\n    if (displaySet.reconstructionIssues && displaySet.reconstructionIssues.length !== 0) {\r\n      displaySet.reconstructionIssues.forEach(warning => {\r\n        switch (warning) {\r\n          case ReconstructionIssues.DATASET_4D:\r\n            inconsistencyWarnings.push('The dataset is 4D.');\r\n            break;\r\n          case ReconstructionIssues.VARYING_IMAGESDIMENSIONS:\r\n            inconsistencyWarnings.push('The dataset frames have different dimensions (rows, columns).');\r\n            break;\r\n          case ReconstructionIssues.VARYING_IMAGESCOMPONENTS:\r\n            inconsistencyWarnings.push('The dataset frames have different components (Sample per pixel).');\r\n            break;\r\n          case ReconstructionIssues.VARYING_IMAGESORIENTATION:\r\n            inconsistencyWarnings.push('The dataset frames have different orientation.');\r\n            break;\r\n          case ReconstructionIssues.IRREGULAR_SPACING:\r\n            inconsistencyWarnings.push('The dataset frames have different pixel spacing.');\r\n            break;\r\n          case ReconstructionIssues.MULTIFFRAMES:\r\n            inconsistencyWarnings.push('The dataset is a multiframes.');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n      inconsistencyWarnings.push('The datasets is not a reconstructable 3D volume. MPR mode is not available.');\r\n    }\r\n\r\n    if (displaySet.missingFrames &&\r\n      (!displaySet.reconstructionIssues ||\r\n        (displaySet.reconstructionIssues && !displaySet.reconstructionIssues.find(warn => warn === ReconstructionIssues.DATASET_4D)))) {\r\n          inconsistencyWarnings.push('The datasets is missing frames: ' + displaySet.missingFrames + '.');\r\n    }\r\n  } else {\r\n    const segMetadata = displaySet.metadata;\r\n    if (!segMetadata) {\r\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\r\n      return inconsistencyWarnings;\r\n    }\r\n\r\n    const { referencedDisplaySet } = displaySet.getSourceDisplaySet(studies, false);\r\n    if (!referencedDisplaySet) {\r\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\r\n      return inconsistencyWarnings;\r\n    }\r\n\r\n    const imageIds = referencedDisplaySet.images.map(image => image.getImageId());\r\n    if (!imageIds || imageIds.length === 0) {\r\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\r\n      return inconsistencyWarnings;\r\n    }\r\n\r\n    for (\r\n      let i = 0, groupsLen = segMetadata.PerFrameFunctionalGroupsSequence.length;\r\n      i < groupsLen;\r\n      ++i\r\n    ) {\r\n      const PerFrameFunctionalGroups = segMetadata.PerFrameFunctionalGroupsSequence[i];\r\n      if (!PerFrameFunctionalGroups) {\r\n        continue;\r\n      }\r\n\r\n      let SourceImageSequence = undefined;\r\n      if (segMetadata.SourceImageSequence) {\r\n        SourceImageSequence = segMetadata.SourceImageSequence[i];\r\n      } else if (PerFrameFunctionalGroups.DerivationImageSequence) {\r\n        SourceImageSequence =\r\n          PerFrameFunctionalGroups.DerivationImageSequence\r\n            .SourceImageSequence;\r\n      }\r\n      if (!SourceImageSequence) {\r\n        if (inconsistencyWarnings.length === 0) {\r\n          const warningMessage = 'The segmentation ' +\r\n            'has frames out of plane respect to the source images.';\r\n            inconsistencyWarnings.push(warningMessage);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const {\r\n        ReferencedSOPInstanceUID,\r\n      } = SourceImageSequence;\r\n\r\n      const imageId = imageIds.find(imageId => {\r\n        const sopCommonModule = cornerstone.metaData.get(\r\n            \"sopCommonModule\",\r\n            imageId\r\n        );\r\n        if (!sopCommonModule) {\r\n            return;\r\n        }\r\n\r\n        return sopCommonModule.sopInstanceUID === ReferencedSOPInstanceUID;\r\n      });\r\n\r\n      if (!imageId) {\r\n        continue;\r\n      }\r\n\r\n      const sourceImageMetadata = cornerstone.metaData.get(\r\n        \"instance\",\r\n        imageId\r\n      );\r\n      if (\r\n        segMetadata.Rows !== sourceImageMetadata.Rows ||\r\n        segMetadata.Columns !== sourceImageMetadata.Columns\r\n      ) {\r\n        const warningMessage = 'The segmentation ' +\r\n          'has frames with different geometry ' +\r\n          'dimensions (Rows and Columns) respect to the source images.';\r\n          inconsistencyWarnings.push(warningMessage);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (inconsistencyWarnings.length !== 0) {\r\n      const warningMessage = 'The segmentation format is not supported yet. ' +\r\n        'The segmentation data (segments) could not be loaded.';\r\n        inconsistencyWarnings.push(warningMessage);\r\n    }\r\n  }\r\n\r\n  // cache the warnings\r\n  displaySet.inconsistencyWarnings = inconsistencyWarnings;\r\n  return inconsistencyWarnings;\r\n}\r\n\r\n/**\r\n * Checks if display set is active, i.e. if the series is currently shown\r\n * in the active viewport.\r\n *\r\n * For data display set, this functions checks if the active\r\n * display set instance uid in the current active viewport is the same of the\r\n * thumbnail one.\r\n *\r\n * For derived modalities (e.g., SEG and RTSTRUCT), the function gets the\r\n * reference display set and then checks the reference uid with the active\r\n * display set instance uid.\r\n *\r\n * @param {displaySet} displaySet\r\n * @param {Study[]} studies\r\n * @param {string} activeDisplaySetInstanceUID\r\n * @returns {boolean} is active.\r\n */\r\n const _isDisplaySetActive = function(displaySet, studies, activeDisplaySetInstanceUID) {\r\n  let active = false;\r\n\r\n  const {\r\n    displaySetInstanceUID,\r\n  } = displaySet;\r\n\r\n  // TO DO: in the future, we could possibly support new modalities\r\n  // we should have a list of all modalities here, instead of having hard coded checks\r\n  if (displaySet.Modality !== 'SEG' &&\r\n    displaySet.Modality !== 'RTSTRUCT' &&\r\n    displaySet.Modality !== 'RTDOSE') {\r\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\r\n  } else if (displaySet.getSourceDisplaySet){\r\n    if (displaySet.Modality === 'SEG') {\r\n      const { referencedDisplaySet } = displaySet.getSourceDisplaySet(studies, false);\r\n      active = referencedDisplaySet ?\r\n        activeDisplaySetInstanceUID === referencedDisplaySet.displaySetInstanceUID :\r\n          false;\r\n    } else {\r\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(studies, false);\r\n      active = referencedDisplaySet ?\r\n        activeDisplaySetInstanceUID === referencedDisplaySet.displaySetInstanceUID :\r\n          false;\r\n    }\r\n  }\r\n\r\n  return active;\r\n};\r\n\r\n/**\r\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\r\n * a mapping layer?\r\n *\r\n * TODO[react]:\r\n * - Add showStackLoadingProgressBar option\r\n *\r\n * @param {Study[]} studies\r\n * @param {string} activeDisplaySetInstanceUID\r\n */\r\nconst _mapStudiesToThumbnails = function(studies, activeDisplaySetInstanceUID) {\r\n  return studies.map(study => {\r\n    const { StudyInstanceUID } = study;\r\n    const thumbnails = study.displaySets.map(displaySet => {\r\n      const {\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n      } = displaySet;\r\n\r\n      let imageId;\r\n      let altImageText;\r\n\r\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\r\n        // TODO: We want to replace this with a thumbnail showing\r\n        // the segmentation map on the image, but this is easier\r\n        // and better than what we have right now.\r\n        altImageText = 'SEG';\r\n      } else if (displaySet.images && displaySet.images.length) {\r\n        const imageIndex = Math.floor(displaySet.images.length / 2);\r\n        imageId = displaySet.images[imageIndex].getImageId();\r\n      } else {\r\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\r\n      }\r\n\r\n      const hasWarnings = _checkForSeriesInconsistencesWarnings(displaySet, studies);\r\n      const active = _isDisplaySetActive(displaySet, studies, activeDisplaySetInstanceUID)\r\n\r\n      return {\r\n        active,\r\n        imageId,\r\n        altImageText,\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n        hasWarnings,\r\n      };\r\n    });\r\n\r\n    return {\r\n      StudyInstanceUID,\r\n      thumbnails,\r\n    };\r\n  });\r\n};\r\n","import { connect } from 'react-redux';\r\nimport Viewer from './Viewer.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\r\n\r\nconst getActiveServer = servers => {\r\n  const isActive = a => a.active === true;\r\n  return servers.servers.find(isActive);\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { viewports, servers } = state;\r\n  return {\r\n    viewports: viewports.viewportSpecificData,\r\n    activeViewportIndex: viewports.activeViewportIndex,\r\n    activeServer: getActiveServer(servers),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTimepointsUpdated: timepoints => {\r\n      dispatch(setTimepoints(timepoints));\r\n    },\r\n    onMeasurementsUpdated: measurements => {\r\n      dispatch(setMeasurements(measurements));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Viewer);\r\n\r\nexport default ConnectedViewer;\r\n","export default class FileLoader {\r\n  fileType;\r\n  loadFile(file, imageId) { }\r\n  getDataset(image, imageId) { }\r\n  getStudies(dataset, imageId) { }\r\n}\r\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\r\nimport FileLoader from './fileLoader';\r\n\r\nconst PDFFileLoader = new (class extends FileLoader {\r\n  fileType = 'application/pdf';\r\n  loadFile(file, imageId) {\r\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    const dataset = {};\r\n    dataset.imageId = image.imageId || imageId;\r\n    return dataset;\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.getDefaultStudy(imageId);\r\n  }\r\n\r\n  getDefaultStudy(imageId) {\r\n    const study = {\r\n      StudyInstanceUID: '',\r\n      StudyDate: '',\r\n      StudyTime: '',\r\n      AccessionNumber: '',\r\n      ReferringPhysicianName: '',\r\n      PatientName: '',\r\n      PatientID: '',\r\n      PatientBirthdate: '',\r\n      PatientSex: '',\r\n      StudyId: '',\r\n      StudyDescription: '',\r\n      series: [\r\n        {\r\n          SeriesInstanceUID: '',\r\n          SeriesDescription: '',\r\n          SeriesNumber: '',\r\n          instances: [\r\n            {\r\n              metadata: {\r\n                SOPInstanceUID: '',\r\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\r\n                Rows: '',\r\n                Columns: '',\r\n                NumberOfFrames: 0,\r\n                InstanceNumber: 1,\r\n              },\r\n              getImageId: () => imageId,\r\n              isLocalFile: true,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    return study;\r\n  }\r\n})();\r\n\r\nexport default PDFFileLoader;\r\n","import dcmjs from 'dcmjs';\r\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\r\nimport FileLoader from './fileLoader';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\r\n\r\nconst DICOMFileLoader = new (class extends FileLoader {\r\n  fileType = 'application/dicom';\r\n  loadFile(file, imageId) {\r\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    let dataset = {};\r\n    try {\r\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\r\n\r\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\r\n        dicomData.dict\r\n      );\r\n\r\n      metadataProvider.addInstance(dataset);\r\n\r\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\r\n        dicomData.meta\r\n      );\r\n    } catch (e) {\r\n      console.error('Error reading dicom file', e);\r\n    }\r\n    // Set imageId on dataset to be consumed later on\r\n    dataset.imageId = imageId;\r\n\r\n    return dataset;\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.getStudyFromDataset(dataset);\r\n  }\r\n\r\n  getStudyFromDataset(dataset = {}) {\r\n    const {\r\n      StudyInstanceUID,\r\n      StudyDate,\r\n      StudyTime,\r\n      AccessionNumber,\r\n      ReferringPhysicianName,\r\n      PatientName,\r\n      PatientID,\r\n      PatientBirthDate,\r\n      PatientSex,\r\n      StudyID,\r\n      StudyDescription,\r\n      SeriesInstanceUID,\r\n      SeriesDescription,\r\n      SeriesNumber,\r\n      imageId,\r\n    } = dataset;\r\n\r\n    const instance = {\r\n      metadata: dataset,\r\n      url: imageId,\r\n    };\r\n\r\n    const series = {\r\n      SeriesInstanceUID: SeriesInstanceUID,\r\n      SeriesDescription: SeriesDescription,\r\n      SeriesNumber: SeriesNumber,\r\n      instances: [instance],\r\n    };\r\n\r\n    const study = {\r\n      StudyInstanceUID,\r\n      StudyDate,\r\n      StudyTime,\r\n      AccessionNumber,\r\n      ReferringPhysicianName,\r\n      PatientName,\r\n      PatientID,\r\n      PatientBirthDate,\r\n      PatientSex,\r\n      StudyID,\r\n      StudyDescription,\r\n      /*\r\n      TODO: in case necessary to uncomment this block, double check every property\r\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\r\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\r\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\r\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\r\n      modalities:\r\n      */\r\n      series: [series],\r\n    };\r\n\r\n    return study;\r\n  }\r\n})();\r\n\r\nexport default DICOMFileLoader;\r\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\r\nimport FileLoader from './fileLoader';\r\nimport PDFFileLoader from './pdfFileLoader';\r\nimport DICOMFileLoader from './dicomFileLoader';\r\n\r\nclass FileLoaderService extends FileLoader {\r\n  fileType;\r\n  loader;\r\n  constructor(file) {\r\n    super();\r\n    const fileType = file && file.type;\r\n    this.loader = this.getLoader(fileType);\r\n    this.fileType = this.loader.fileType;\r\n  }\r\n\r\n  static groupSeries(studies) {\r\n    const groupBy = (list, groupByKey, listKey) => {\r\n      let nonKeyCounter = 1;\r\n\r\n      return list.reduce((acc, obj) => {\r\n        let key = obj[groupByKey];\r\n        const list = obj[listKey];\r\n\r\n        // in case key not found, group it using counter\r\n        key = !!key ? key : '' + nonKeyCounter++;\r\n\r\n        if (!acc[key]) {\r\n          acc[key] = { ...obj };\r\n          acc[key][listKey] = [];\r\n        }\r\n\r\n        acc[key][listKey].push(...list);\r\n\r\n        return acc;\r\n      }, {});\r\n    };\r\n\r\n    const studiesGrouped = Object.values(\r\n      groupBy(studies, 'StudyInstanceUID', 'series')\r\n    );\r\n\r\n    const result = studiesGrouped.map(studyGroup => {\r\n      const seriesGrouped = groupBy(\r\n        studyGroup.series,\r\n        'SeriesInstanceUID',\r\n        'instances'\r\n      );\r\n      studyGroup.series = Object.values(seriesGrouped);\r\n\r\n      return studyGroup;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  addFile(file) {\r\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\r\n  }\r\n\r\n  loadFile(file, imageId) {\r\n    return this.loader.loadFile(file, imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    return this.loader.getDataset(image, imageId);\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.loader.getStudies(dataset, imageId);\r\n  }\r\n\r\n  getLoader(fileType) {\r\n    if (fileType === 'application/pdf') {\r\n      return PDFFileLoader;\r\n    } else {\r\n      // Default to dicom loader\r\n      return DICOMFileLoader;\r\n    }\r\n  }\r\n}\r\n\r\nexport default FileLoaderService;\r\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\r\n\r\nconst processFile = async file => {\r\n  try {\r\n    const fileLoaderService = new FileLoaderService(file);\r\n    const imageId = fileLoaderService.addFile(file);\r\n    const image = await fileLoaderService.loadFile(file, imageId);\r\n    const dataset = await fileLoaderService.getDataset(image, imageId);\r\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\r\n\r\n    return studies;\r\n  } catch (error) {\r\n    console.log(\r\n      error.name,\r\n      ':Error when trying to load and process local files:',\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport default async function filesToStudies(files) {\r\n  const processFilesPromises = files.map(processFile);\r\n  const studies = await Promise.all(processFilesPromises);\r\n\r\n  return FileLoaderService.groupSeries(studies.flat());\r\n}\r\n"],"sourceRoot":""}